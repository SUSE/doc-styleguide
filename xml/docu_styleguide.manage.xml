<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-manage">
 <title>Managing documents</title>

 <para>
  This section provides an overview over features of XML you can use to
  manage documents.
 </para>

 <sect2 xml:id="sec-remark">
  <title>Remarks</title>
  <para>
   Use remarks for editorial comments. Remarks can be placed within, before,
   or after a para but must always be within a section element. When
   creating output, remarks can be made visible in the output and thus help
   within the editorial process. When creating the final output, deactivate
   remarks.
  </para>
  <para>
   Start remarks with your user name and the current date, then add a colon
   (<literal>:</literal>) and finally your actual remark. To comment on
   someone else's remark, add a new remark directly below it. Delete remarks
   when the corresponding issue is resolved.
  </para>
<screen>&lt;remark&gt;tux (2013-10-13): could not find the option for foo&lt;/remark&gt;
&lt;remark&gt;geeko (2013-11-02): see /usr/share/doc/foo.html&lt;/remark&gt;</screen>
  <para>
   You can add a
   <tag class="attribute">role</tag>
   attribute with one of the following values to show the type of the
   remark:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title><tag class="attvalue">structure</tag></title>
     <para>
      Use this type of remark to suggest changes to the text or XML
      structure.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title><tag class="attvalue">language</tag></title>
     <para>
      Use this type of remark to suggest language improvements.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title><tag class="attvalue">needinfo</tag></title>
     <para>
      Use this type of remark to mark sections where you need input from
      others, such as developers.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title><tag class="attvalue">trans</tag></title>
     <para>
      Use this type of remark to give hints to translators.
     </para>
    </formalpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="sec-xml-comment">
  <title>XML comments</title>
  <para>
   XML comments can be used for temporarily disabling portions of text.
   Another use of XML comments is to create more permanent internal comments
   or to mark up changes made for layout reasons. XML comments are never
   visible in a publication.
  </para>
<screen>&lt;!-- This is an XML comment. --&gt;</screen>
  <para>
   For information about formatting XML comments, see
   <xref linkend="sec-format-xml"/>.
  </para>
 </sect2>

 <sect2 xml:id="sec-entity">
  <title>Entities</title>
  <para>
   Entities are used to expand text. There are several situations in which
   they can be used:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     To represent special characters that cannot easily be displayed,
     entered, or memorized.
    </para>
   </listitem>
   <listitem>
    <para>
     To integrate external files using entities representing references to
     their file names.
    </para>
   </listitem>
   <listitem>
    <para>
     To repeat content easily.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   When an entity is defined, it can be used in many places.
   Entities increase consistency, as they only need to be defined once and will
   automatically be expanded everywhere within the document.
  </para>
  <sect3 xml:id="sec-use-entity">
   <title>Using entity files</title>
   <para>
    &suse; uses a set of custom entities.
    Find these entities in the file
    <filename>xml/entity-decl.ent</filename> in each documentation repository.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Entity files are only used for original, English-language documents.
      Translated documents will contain only the resolved form of entities,
      that is, plain-text directly in the document.
     </para>
    </listitem>
    <listitem>
     <para>
      If you need to define new custom entities, add their new definitions
      to the <filename>xml/entity-decl.ent</filename> file.
      Do not include custom entity definitions directly in the file header,
      unless the custom definitions are needed to override externally
      embedded entities.
     </para>
    </listitem>
    <listitem>
     <para>
      Use the UTF-8 encoding when editing and saving
      the entity declaration file or any of the &suse; XML files.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Each header of a &suse; XML file includes the entity declaration file (by
    means of an entity):
   </para>
<screen>&lt;!ENTITY % entities SYSTEM "entity-decl.ent"&gt;
%entities;</screen>
   <example xml:id="ex-entity">
    <title>Excerpt from an <filename>entity-decl.ent</filename></title>
<screen>&lt;!ENTITY<co xml:id="co-declaration"/> server<co xml:id="co-definition"/> "sun<co xml:id="co-value"/>"&gt;
&lt;!ENTITY domain  "example.org"&gt;
&lt;!ENTITY host    "&amp;server;.&amp;domain;<co xml:id="co-entity"/>"&gt;
&lt;!ENTITY hosttag "&lt;uri xmlns='http://docbook.org/ns/docbook'&gt;&amp;host;&lt;/uri&gt;<co xml:id="co-tag"/>"&gt;</screen>
    <calloutlist>
     <callout arearefs="co-declaration">
      <para>
       Making an entity declaration.
      </para>
     </callout>
     <callout arearefs="co-definition">
      <para>
       Defining the entity name.
      </para>
     </callout>
     <callout arearefs="co-value">
      <para>
       Setting the value which the processed entity should expand to.
      </para>
     </callout>
     <callout arearefs="co-entity">
      <para>
       Using another entity within the entity value.
       This entity reference is only valid if the other entity is defined
       somewhere within the scope of the XML document that is built.
       However, it does not matter whether the entity is defined before or
       after the current entity definition.
      </para>
     </callout>
     <callout arearefs="co-tag">
      <para>
       Using a DocBook/GeekoDoc element within the entity value.
       The attribute <tag class="attribute">xmlns</tag> must be included to
       define the correct XML namespace.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect3>
  <sect3 xml:id="sec-type-entity">
   <title>Common types of entities</title>
   <para>
    An <filename>entity-decl.ent</filename> file contains several categories of
    entities:
   </para>
   <variablelist>
    <varlistentry>
     <term>Products</term>
     <listitem>
      <para>
       All &suse; product names and other products and applications.
       This helps in case sudden name changes are necessary and avoids
       misspellings.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Platforms</term>
     <listitem>
      <para>
       Use entities for all hardware architectures referenced.
       This helps in case sudden name changes are necessary.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Books</term>
     <listitem>
      <para>
       Title entities for all &suse; books.
       This helps in case sudden name changes are necessary.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>General Entities</term>
     <listitem>
      <para>
       Network IP addresses, host names, and user names.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    There are several guidelines to consider when working with product
    entities for &suse; documentation:
   </para>
   <variablelist>
    <varlistentry>
     <term>Entity selection</term>
     <listitem>
      <para>
       Use the entity name
       <tag class="genentity">product</tag>
       to identify the product for which the documentation is built. Set the
       value of this entity once per release and have it expand to the name
       of the current product:
      </para>
<screen>&lt;phrase role="productname"&gt;&amp;product;&lt;/phrase&gt; includes 389-ds.</screen>
      <para>
       If you need to reference a specific subproduct or a different product,
       use a more specific entity:
      </para>
<screen>The Ext4 file system has been included in the &lt;literal&gt;&amp;suse;&lt;/literal&gt;
Kernel since &lt;literal&gt;&amp;sle;&lt;/literal&gt; XYZ.</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Acronyms</term>
     <listitem>
      <para>
       Avoid using acronyms of product names where they are not the
       preferred form of the name. If you do define an additional acronym
       version of a longer product name, append an <literal>a</literal> to
       the end of the entity name. For example, use
       <tag class="genentity">slesa</tag>
       the acronym <quote>SLES</quote>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Trademarks</term>
     <listitem>
      <para>
       Follow the rules under <xref linkend="sec-trademark"/> and
       <xref linkend="sec-product"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-xinclude">
  <title>XInclude elements</title>
  <para>
   XInclude elements are used to create modular source files that are easier
   to work with and can be re-used. When editing a book, create a new source
   file for every chapter. Later, create a new GeekoDoc file that can serve as
   the central point. In this file, use XInclude elements to reference all
   chapters in the correct order:
  </para>
<screen>&lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="gfdl.xml"/&gt;</screen>
  <para>
   XInclude elements allow adding common sections to multiple books or
   articles without having to maintain the text in multiple places. Common
   sections include licenses and information on typographical conventions.
   XIncludes also simplify co-editing documentation with others in a version
   control system as they reduce the chance of merge conflicts.
  </para>
  <para>
   By default, files referenced via XIncludes must be well-formed XML files that
   are also valid GeekoDoc fragments.
   This means that they must have a single top-level element and must not
   contain elements that are not allowed in GeekoDoc.
   Files that are supposed to be referenced multiple times from within the same
   set, book, or article must not contain any <tag class="attribute">xml:id</tag>
   attributes.
  </para>
  <para>
   XIncludes also allow embedding plaintext files, for example, as the
   content in <tag class="emptytag">screen</tag> elements.
   To embed a plaintext file, add the attribute
   <tag class="attribute">parse="text"</tag> to the
   <tag class="emptytag">xi:include</tag> element.
  </para>
 </sect2>
</sect1>
